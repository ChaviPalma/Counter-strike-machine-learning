{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["KCX7FcZW3s2d"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Regresión lineal simple del Target MatchKills\n","\n","Integrantes:\n","\n","*   Gonzalo Gallardo\n","*   Bárbara Palma Mena\n","\n","Docente: Giocrisrai Godoy\n","\n","Sección: MLY0100 - 002D"],"metadata":{"id":"NhlbihUGzM89"}},{"cell_type":"markdown","source":["## Importar librerias\n"],"metadata":{"id":"KCX7FcZW3s2d"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score"],"metadata":{"id":"AOa8jhuw3xaF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BK-LgXAhyC33","executionInfo":{"status":"ok","timestamp":1748385012446,"user_tz":240,"elapsed":38546,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"950dc3af-40a2-4ca2-dec0-406a2c7291a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["#Montar drive en el Notebook\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["#Llamar archivo desde el drive\n","file_path = \"/content/drive/MyDrive/Machine Learning- Counter Strike/csgo_datos_limpios.csv\"\n","csgo = pd.read_csv(file_path, sep=\",\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ThZpaBfa3Vpx","executionInfo":{"status":"ok","timestamp":1748385718927,"user_tz":240,"elapsed":500,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"c4e64c22-f394-4381-b354-80bff4272190"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-15-1a743843a119>:3: DtypeWarning: Columns (3,4) have mixed types. Specify dtype option on import or set low_memory=False.\n","  csgo = pd.read_csv(file_path, sep=\",\")\n"]}]},{"cell_type":"markdown","source":["##Análisis estadístico básico\n","\n","\n"],"metadata":{"id":"jQcXiSr74Nds"}},{"cell_type":"code","source":["csgo.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"MC6-UfUZ5l-C","executionInfo":{"status":"ok","timestamp":1748385720626,"user_tz":240,"elapsed":97,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"561ff6c2-2677-4898-e3aa-185a6c1b237d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Map       Team  RoundId RoundWinner MatchWinner  Survived  \\\n","0  de_inferno  Terrorist        1       False        True     False   \n","1  de_inferno  Terrorist        1       False        True     False   \n","2  de_inferno  Terrorist        1       False        True     False   \n","3  de_inferno  Terrorist        1       False        True     False   \n","4  de_inferno  Terrorist        1       False        True      True   \n","\n","   AbnormalMatch               TimeAlive       TravelledDistance  \\\n","0          False  51.120.248.995.704.500  10.083.140.737.457.000   \n","1          False   4.348.662.552.266.170  60.960.883.184.688.400   \n","2          False   3.735.469.847.054.540   5.642.252.383.582.750   \n","3          False   4.767.886.136.441.470   8.963.473.313.229.970   \n","4          False   5.312.251.089.027.310  10.865.649.734.393.100   \n","\n","   RLethalGrenadesThrown  ...  RoundFlankKills  RoundStartingEquipmentValue  \\\n","0                      0  ...                0                          750   \n","1                      0  ...                0                          800   \n","2                      0  ...                0                         1000   \n","3                      0  ...                0                          850   \n","4                      1  ...                0                         1000   \n","\n","   TeamStartingEquipmentValue  MatchKills  MatchFlankKills  MatchAssists  \\\n","0                        4400           0                0             0   \n","1                        4400           0                0             0   \n","2                        4400           0                0             0   \n","3                        4400           0                0             0   \n","4                        4400           0                0             0   \n","\n","  MatchHeadshots  TotalGrenades  RoundDeaths  KDR  \n","0              0              4            1  0.0  \n","1              0              0            1  0.0  \n","2              0              0            1  0.0  \n","3              0              0            1  0.0  \n","4              0              2            0  0.0  \n","\n","[5 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-27d699d9-ccdc-457c-93cd-451f56626fa6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Map</th>\n","      <th>Team</th>\n","      <th>RoundId</th>\n","      <th>RoundWinner</th>\n","      <th>MatchWinner</th>\n","      <th>Survived</th>\n","      <th>AbnormalMatch</th>\n","      <th>TimeAlive</th>\n","      <th>TravelledDistance</th>\n","      <th>RLethalGrenadesThrown</th>\n","      <th>...</th>\n","      <th>RoundFlankKills</th>\n","      <th>RoundStartingEquipmentValue</th>\n","      <th>TeamStartingEquipmentValue</th>\n","      <th>MatchKills</th>\n","      <th>MatchFlankKills</th>\n","      <th>MatchAssists</th>\n","      <th>MatchHeadshots</th>\n","      <th>TotalGrenades</th>\n","      <th>RoundDeaths</th>\n","      <th>KDR</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>de_inferno</td>\n","      <td>Terrorist</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>51.120.248.995.704.500</td>\n","      <td>10.083.140.737.457.000</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>750</td>\n","      <td>4400</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>de_inferno</td>\n","      <td>Terrorist</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>4.348.662.552.266.170</td>\n","      <td>60.960.883.184.688.400</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>800</td>\n","      <td>4400</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>de_inferno</td>\n","      <td>Terrorist</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>3.735.469.847.054.540</td>\n","      <td>5.642.252.383.582.750</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>4400</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>de_inferno</td>\n","      <td>Terrorist</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>4.767.886.136.441.470</td>\n","      <td>8.963.473.313.229.970</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>850</td>\n","      <td>4400</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>de_inferno</td>\n","      <td>Terrorist</td>\n","      <td>1</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>5.312.251.089.027.310</td>\n","      <td>10.865.649.734.393.100</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1000</td>\n","      <td>4400</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 30 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27d699d9-ccdc-457c-93cd-451f56626fa6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-27d699d9-ccdc-457c-93cd-451f56626fa6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-27d699d9-ccdc-457c-93cd-451f56626fa6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0df96329-4240-443e-8873-f5f044f69a3a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0df96329-4240-443e-8873-f5f044f69a3a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0df96329-4240-443e-8873-f5f044f69a3a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"csgo"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["csgo.columns.tolist()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ZGv0-bS6RWQ","executionInfo":{"status":"ok","timestamp":1748385822947,"user_tz":240,"elapsed":28,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"f25b6707-471b-43c4-cab4-330aaaf97d40"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Map',\n"," 'Team',\n"," 'RoundId',\n"," 'RoundWinner',\n"," 'MatchWinner',\n"," 'Survived',\n"," 'AbnormalMatch',\n"," 'TimeAlive',\n"," 'TravelledDistance',\n"," 'RLethalGrenadesThrown',\n"," 'RNonLethalGrenadesThrown',\n"," 'PrimaryAssaultRifle',\n"," 'PrimarySniperRifle',\n"," 'PrimaryHeavy',\n"," 'PrimarySMG',\n"," 'PrimaryPistol',\n"," 'FirstKillTime',\n"," 'RoundKills',\n"," 'RoundAssists',\n"," 'RoundHeadshots',\n"," 'RoundFlankKills',\n"," 'RoundStartingEquipmentValue',\n"," 'TeamStartingEquipmentValue',\n"," 'MatchKills',\n"," 'MatchFlankKills',\n"," 'MatchAssists',\n"," 'MatchHeadshots',\n"," 'TotalGrenades',\n"," 'RoundDeaths',\n"," 'KDR']"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["csgo.describe().T"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"Annlho326o7W","executionInfo":{"status":"ok","timestamp":1748385843651,"user_tz":240,"elapsed":209,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"046fa171-b0a2-4976-ed70-daeeb088744f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                               count          mean          std  min      25%  \\\n","RoundId                      79157.0     12.765517     7.432837  1.0      6.0   \n","RLethalGrenadesThrown        79157.0      0.498667     0.597985  0.0      0.0   \n","RNonLethalGrenadesThrown     79157.0      1.258057     1.184909  0.0      0.0   \n","PrimaryAssaultRifle          79157.0      0.675363     0.464125  0.0      0.0   \n","PrimarySniperRifle           79157.0      0.089840     0.279797  0.0      0.0   \n","PrimaryHeavy                 79157.0      0.005964     0.075497  0.0      0.0   \n","PrimarySMG                   79157.0      0.007046     0.082453  0.0      0.0   \n","PrimaryPistol                79157.0      0.221787     0.415451  0.0      0.0   \n","RoundKills                   79157.0      0.671349     0.881798  0.0      0.0   \n","RoundAssists                 79157.0      0.146178     0.385601  0.0      0.0   \n","RoundHeadshots               79157.0      0.301553     0.578843  0.0      0.0   \n","RoundFlankKills              79157.0      0.095633     0.320641  0.0      0.0   \n","RoundStartingEquipmentValue  79157.0   3778.108695  2111.285406  0.0   1600.0   \n","TeamStartingEquipmentValue   79157.0  18890.133532  9743.203024  0.0  10900.0   \n","MatchKills                   79157.0      8.511578     6.195079  0.0      3.0   \n","MatchFlankKills              79157.0      1.209912     1.435150  0.0      0.0   \n","MatchAssists                 79157.0      1.874831     1.824027  0.0      0.0   \n","MatchHeadshots               79157.0      3.858484     3.246752  0.0      1.0   \n","TotalGrenades                79157.0      1.756724     1.517838  0.0      0.0   \n","RoundDeaths                  79157.0      0.596460     0.490610  0.0      0.0   \n","KDR                          79157.0      0.671349     0.881798  0.0      0.0   \n","\n","                                 50%      75%      max  \n","RoundId                         12.0     19.0     36.0  \n","RLethalGrenadesThrown            0.0      1.0      4.0  \n","RNonLethalGrenadesThrown         1.0      2.0      6.0  \n","PrimaryAssaultRifle              1.0      1.0      1.0  \n","PrimarySniperRifle               0.0      0.0      1.0  \n","PrimaryHeavy                     0.0      0.0      1.0  \n","PrimarySMG                       0.0      0.0      1.0  \n","PrimaryPistol                    0.0      0.0      1.0  \n","RoundKills                       0.0      1.0      5.0  \n","RoundAssists                     0.0      0.0      4.0  \n","RoundHeadshots                   0.0      0.0      5.0  \n","RoundFlankKills                  0.0      0.0      5.0  \n","RoundStartingEquipmentValue   4700.0   5200.0   8850.0  \n","TeamStartingEquipmentValue   22550.0  26050.0  36150.0  \n","MatchKills                       8.0     13.0     41.0  \n","MatchFlankKills                  1.0      2.0     11.0  \n","MatchAssists                     1.0      3.0     14.0  \n","MatchHeadshots                   3.0      6.0     22.0  \n","TotalGrenades                    2.0      3.0      9.0  \n","RoundDeaths                      1.0      1.0      1.0  \n","KDR                              0.0      1.0      5.0  "],"text/html":["\n","  <div id=\"df-93914f14-1104-498b-b576-5e8ef135a96c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>RoundId</th>\n","      <td>79157.0</td>\n","      <td>12.765517</td>\n","      <td>7.432837</td>\n","      <td>1.0</td>\n","      <td>6.0</td>\n","      <td>12.0</td>\n","      <td>19.0</td>\n","      <td>36.0</td>\n","    </tr>\n","    <tr>\n","      <th>RLethalGrenadesThrown</th>\n","      <td>79157.0</td>\n","      <td>0.498667</td>\n","      <td>0.597985</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>RNonLethalGrenadesThrown</th>\n","      <td>79157.0</td>\n","      <td>1.258057</td>\n","      <td>1.184909</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>PrimaryAssaultRifle</th>\n","      <td>79157.0</td>\n","      <td>0.675363</td>\n","      <td>0.464125</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>PrimarySniperRifle</th>\n","      <td>79157.0</td>\n","      <td>0.089840</td>\n","      <td>0.279797</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>PrimaryHeavy</th>\n","      <td>79157.0</td>\n","      <td>0.005964</td>\n","      <td>0.075497</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>PrimarySMG</th>\n","      <td>79157.0</td>\n","      <td>0.007046</td>\n","      <td>0.082453</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>PrimaryPistol</th>\n","      <td>79157.0</td>\n","      <td>0.221787</td>\n","      <td>0.415451</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>RoundKills</th>\n","      <td>79157.0</td>\n","      <td>0.671349</td>\n","      <td>0.881798</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>RoundAssists</th>\n","      <td>79157.0</td>\n","      <td>0.146178</td>\n","      <td>0.385601</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>RoundHeadshots</th>\n","      <td>79157.0</td>\n","      <td>0.301553</td>\n","      <td>0.578843</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>RoundFlankKills</th>\n","      <td>79157.0</td>\n","      <td>0.095633</td>\n","      <td>0.320641</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>RoundStartingEquipmentValue</th>\n","      <td>79157.0</td>\n","      <td>3778.108695</td>\n","      <td>2111.285406</td>\n","      <td>0.0</td>\n","      <td>1600.0</td>\n","      <td>4700.0</td>\n","      <td>5200.0</td>\n","      <td>8850.0</td>\n","    </tr>\n","    <tr>\n","      <th>TeamStartingEquipmentValue</th>\n","      <td>79157.0</td>\n","      <td>18890.133532</td>\n","      <td>9743.203024</td>\n","      <td>0.0</td>\n","      <td>10900.0</td>\n","      <td>22550.0</td>\n","      <td>26050.0</td>\n","      <td>36150.0</td>\n","    </tr>\n","    <tr>\n","      <th>MatchKills</th>\n","      <td>79157.0</td>\n","      <td>8.511578</td>\n","      <td>6.195079</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>8.0</td>\n","      <td>13.0</td>\n","      <td>41.0</td>\n","    </tr>\n","    <tr>\n","      <th>MatchFlankKills</th>\n","      <td>79157.0</td>\n","      <td>1.209912</td>\n","      <td>1.435150</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>MatchAssists</th>\n","      <td>79157.0</td>\n","      <td>1.874831</td>\n","      <td>1.824027</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>MatchHeadshots</th>\n","      <td>79157.0</td>\n","      <td>3.858484</td>\n","      <td>3.246752</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>22.0</td>\n","    </tr>\n","    <tr>\n","      <th>TotalGrenades</th>\n","      <td>79157.0</td>\n","      <td>1.756724</td>\n","      <td>1.517838</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>RoundDeaths</th>\n","      <td>79157.0</td>\n","      <td>0.596460</td>\n","      <td>0.490610</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>KDR</th>\n","      <td>79157.0</td>\n","      <td>0.671349</td>\n","      <td>0.881798</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93914f14-1104-498b-b576-5e8ef135a96c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-93914f14-1104-498b-b576-5e8ef135a96c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-93914f14-1104-498b-b576-5e8ef135a96c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-40c1eefc-a937-41a3-ad97-d8c4d3bd4094\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40c1eefc-a937-41a3-ad97-d8c4d3bd4094')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-40c1eefc-a937-41a3-ad97-d8c4d3bd4094 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"csgo\",\n  \"rows\": 21,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 79157.0,\n        \"max\": 79157.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          79157.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4162.729967520907,\n        \"min\": 0.005963576834692552,\n        \"max\": 18890.133532094445,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          12.765516631504479\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2152.484804730979,\n        \"min\": 0.0754967804936965,\n        \"max\": 9743.203024193952,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          7.432837007058392\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21821789023599247,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2386.604913739539,\n        \"min\": 0.0,\n        \"max\": 10900.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4975.714556485234,\n        \"min\": 0.0,\n        \"max\": 22550.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5740.131744796374,\n        \"min\": 0.0,\n        \"max\": 26050.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8024.891300851133,\n        \"min\": 1.0,\n        \"max\": 36150.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["### Selección de Target y predictor"],"metadata":{"id":"8bJmNOPF7Dam"}},{"cell_type":"code","source":["#Elegimos de target MatchKills por qué ayuda a predecir de mejor manera el rendimiento del jugador(Número total de enemigos eliminados por jugador durante toda la partida)\n","target = 'MatchKills'\n","\n","#Elegimos como variable predictora MatchHeadshots  por qué se usa para medir el desempeño individual de un jugador en una ronda específica(Cantidad de enemigos que un jugador mató durante una ronda específica)\n","#Esta variable nos ayuda a hacer la regresión lineal simple\n","predictor = 'MatchHeadshots'\n","\n","\n","\n","X= csgo[[predictor]] #variable predictora que se usará para hacer la predición, crea un DataFrame solo de la columna MatchHeadshots\n","y = csgo[target] #Es lo que se va a predecir, haciendo una serie con una única columna\n","\n","print(X)\n","print(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wfr3Jaht7XZq","executionInfo":{"status":"ok","timestamp":1748391622247,"user_tz":240,"elapsed":60,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"e2974574-6e4c-43ba-f289-609845c2338a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       MatchHeadshots\n","0                   0\n","1                   0\n","2                   0\n","3                   0\n","4                   0\n","...               ...\n","79152               2\n","79153               3\n","79154               3\n","79155               0\n","79156               2\n","\n","[79157 rows x 1 columns]\n","0        0\n","1        0\n","2        0\n","3        0\n","4        0\n","        ..\n","79152    4\n","79153    8\n","79154    5\n","79155    1\n","79156    5\n","Name: MatchKills, Length: 79157, dtype: int64\n"]}]},{"cell_type":"markdown","source":["### Dividiendo el csv para entrenamiento y pruebas"],"metadata":{"id":"gB7VMZ91-qd4"}},{"cell_type":"code","source":["#Con test_size se divide 20% para pruebas y 80% entrenamiento\n","#Random_state garantiza que la partición sea la misma cada vez que se ejecute el notebook si se usa el mismo número en este caso 42\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"VdW3w70p-p5V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Esto crea una instancia del modelo de regresión lineal\n","modelo = LinearRegression()\n","#Aqui se esta entrenado el modelo (X_train esta entrenado la variable de predicción, y_train esta entrenado el target )\n","modelo.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"DPaFKLq9_mNG","executionInfo":{"status":"ok","timestamp":1748391628761,"user_tz":240,"elapsed":55,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"e4f8ac24-63a1-454d-e5ef-7d8c817ed443"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-4 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-4 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-4 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-4 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-4 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-4 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-4 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-4 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-4 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-4 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-4 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-4 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-4 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-4 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-4 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-4 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-4 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-4 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-4 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-4 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["### Evaluación del modelo\n"],"metadata":{"id":"AnHPzJ4eA-HZ"}},{"cell_type":"code","source":["# Se generan las predicciones del modelo usando el conjunto de prueba\n","y_pred = modelo.predict(X_test)\n","\n","# Calcula el MAE, mide en promedio cuánto se equivoca el modelo (error absoluto medio)\n","mae = mean_absolute_error(y_test, y_pred)\n","\n","# Calcula el RMSE, penaliza más los errores grandes (raíz del error cuadrático medio)\n","rmse = mean_squared_error(y_test, y_pred)\n","\n","# Calcula el R², mide qué tan bien el modelo explica la variabilidad del target\n","r2 = r2_score(y_test, y_pred)\n","\n","# Se imprimen las métricas de evaluación con formato amigable\n","print(f\"MAE:  {mae:.2f}\")   # Error absoluto promedio\n","print(f\"RMSE: {rmse:.2f}\")  # Error cuadrático medio\n","print(f\"R²:   {r2:.3f}\")    # Coeficiente de determinación\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ToIkNCddBKUI","executionInfo":{"status":"ok","timestamp":1748391629513,"user_tz":240,"elapsed":24,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"c76bd9a3-4d1b-4907-c698-56383c33af8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MAE:  2.63\n","RMSE: 11.95\n","R²:   0.692\n"]}]},{"cell_type":"markdown","source":["**Métricas**\n","\n","MAE(2.63): Esto quiere decir que en promedio, el modelo suele equivocarse cada 2.63 kills. Lo que es bastante razonable en el contexto de las partidas.\n","\n","RMSE(11.95): Se penalizan los errores más grandes pero dentro de todo se sigue manteniendo en un rango aceptable.\n","\n","R²(0.692): El modelo explicaría el 69,2% de variabilidad. Lo que indicaría una fuerte capacidad predictiva apesar de ser un modelo de regresión lineal de una sola variable.\n","\n"],"metadata":{"id":"cqLbmz9vPmKq"}},{"cell_type":"markdown","source":["### Visualización del modelo\n","\n"],"metadata":{"id":"VFDnAdI3C6sY"}},{"cell_type":"code","source":["\n","plt.figure(figsize=(8, 5))\n","sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)\n","plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')  # línea perfecta\n","plt.xlabel(\"Valor real\")\n","plt.ylabel(\"Predicción\")\n","plt.title(f\"Regresión Lineal Simple: {predictor} → {target}\")\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"dk9uEHGOC_WH","executionInfo":{"status":"ok","timestamp":1748391632823,"user_tz":240,"elapsed":339,"user":{"displayName":"BARBARA JAVIERA PALMA MENA","userId":"07082877117044423795"}},"outputId":"517462a6-d192-4fc7-d765-0450c195e753"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Análisis Visual**\n","\n","*   Se puede observar en el gráfico que la concentración de los puntos se encuentra de la línea roja(línea ideal) lo que sugiere una buena precisión.\n","*   Existe una clara relación lineal creciente, lo que quiere decir que a mayor cantidad de MatchHeadshots es mayor la cantidad de MatchKills.\n","*   Se puede visualizar algi de dispersión en el gráfico pero el patrón en general es solido y está bien definido.\n","\n","\n","\n"],"metadata":{"id":"X6LqCFIkSvix"}}]}